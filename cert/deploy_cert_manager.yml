- hosts: cert
  vars:
    cert_manager_namespace: cert-manager
    cert_manager_version: v1.5.3
    cert_manager_helm_repo_name: jetstack 
    cert_manager_helm_repo_url: https://charts.jetstack.io
    cert_manager_helm_release_name: cert-manager
    cert_manager_helm_chart: jetstack/cert-manager
    cert_manager_manifest_url: "https://github.com/jetstack/cert-manager/releases/download/{{ cert_manager_version }}/cert-manager.yaml"
  tasks:
  - name: installer les pré-requis python
    pip:
      name:
        - openshift
  - name: Installer le référentiel Helm Jetstack pour cert-manager
    community.kubernetes.helm_repository:
      name: "{{ cert_manager_helm_repo_name }}"
      repo_url: "{{ cert_manager_helm_repo_url }}"
      state: present
  - name: Créer le namespace pour cert-manager
    k8s:
      kind: namespace
      name: "{{ cert_manager_namespace }}"
  - name: Installer cert-manager
    community.kubernetes.helm:                                                                                                                                                                                                             
      name: "{{ cert_manager_helm_release_name }}"
      chart_ref: "{{ cert_manager_helm_chart }}"
      release_namespace: "{{ cert_manager_namespace }}"
      release_state: present
      chart_version: "{{ cert_manager_version }}"
      create_namespace: yes
      release_values:
        installCRDs: true
  - name: Decrypter la cle prive pour le root CA auto-signé
    shell:
      cmd: |
        openssl rsa -in {{ self_signed_pki_path }}/{{ self_signed_pki_ca_key_path }}/{{ self_signed_pki_ca_key_file }} -passin pass:{{ self_signed_pki_key_password }}
    when: self_signed_pki_path is defined and self_signed_pki_key_password is defined
    register: decrypted_key
  - name: Convertir la clé privé en format base64
    set_fact:
      self_signed_root_ca_key: "{{ decrypted_key.stdout | b64encode }}"
    when: decrypted_key is defined and decrypted_key.stdout is defined  
  - name: Obtenir le certificat root du CA auto signé et l'assembler au certificat intermédiaire
    set_fact:
      self_signed_root_ca_cert: "{{ lookup('file', self_signed_pki_path + '/' +  self_signed_pki_ca_cert_path + '/' + self_signed_pki_ca_cert_file ) | string | b64encode }}"
  - name: Obtenir le certificat intermédiaire du CA auto signé et l'assembler au certificat intermédiaire
    set_fact:
      self_signed_intemediate_ca_cert: "{{ lookup('file', self_signed_pki_path + '/' + self_signed_pki_ca_cert_path + '/' + self_signed_pki_ca_intermediate_file) | string | b64encode }}"
    when:
    - self_signed_pki_ca_intermediate_file is defined
    - self_signed_pki_ca_intermediate_file is not none
    - self_signed_pki_ca_intermediate_file | length > 0
  - name: Générer le manifest dans les artefacts
    local_action:
      module: template
      src: root-ca-cert-manager.yaml.j2
      dest: "{{ manifest_dir }}/root-ca-cert-manager.yaml"
    when:
      - manifest_dir is defined 
      - self_signed_root_ca_key is defined
      - self_signed_root_ca_cert is defined
      - self_signed_intemediate_ca_cert is defined
  - name: Installer ClusterIssuer avec le certificat root self-signed
    k8s:
      definition: '{{ lookup("template", "root-ca-cert-manager.yaml.j2") }}'
      namespace: "{{ cert_manager_namespace }}"
      state: present
    when: self_signed_root_ca_key is defined and self_signed_root_ca_cert is defined and self_signed_intemediate_ca_cert is defined
  - name: Copier le root ca sur les noeuds du Cluster
    command: scp -i {{ node.key }} {{ self_signed_pki_path }}/{{ self_signed_pki_ca_cert_path }}/{{ self_signed_pki_ca_cert_file }} {{ node.user }}@{{ node.name }}:/tmp
    with_items: "{{ kube_nodes }}"
    loop_control:
      index_var: node
  - name: Préparer le root ca sur les noeuds du Cluster
    command: ssh -i {{ node.key }} {{ node.user }}@{{ node.name }} "sudo cp /tmp/{{ self_signed_pki_ca_cert_file }} /etc/pki/ca-trust/source/anchors"
    with_items: "{{ kube_nodes }}"
    loop_control:
      index_var: node
  - name: Installer le root ca sur les noeuds du Cluster
    command: ssh -i {{ node.key }} {{ node.user }}@{{ node.name }} "sudo update-ca-trust extract"
    with_items: "{{ kube_nodes }}"
    loop_control:
      index_var: node
  - name: Installer les certificats sur l'hôte de gestion
    block:
    - name: Installer le certificat root sur le serveur de Management Debian
      copy:
        src: "{{ self_signed_pki_path }}/{{ self_signed_pki_ca_cert_path }}/{{ self_signed_pki_ca_cert_file }}"
        dest: /usr/local/share/ca-certificates
      when:
        - ansible_os_family == 'Debian'
    - name: Mettre à jour la base de certificat root sur le serveur de Management Debian
      command: update-ca-certificates
      when:
        - ansible_os_family == 'Debian'
    - name: Installer le certificat root sur le serveur de Management RedHat
      copy:
        src: "{{ self_signed_pki_path }}/{{ self_signed_pki_ca_cert_path }}/{{ self_signed_pki_ca_cert_file }}"
        dest: /etc/pki/ca-trust/source/anchors
      when:
        - ansible_os_family == 'RedHat'
    - name: Mettre à jour la base de certificat root sur le serveur de Management RedHat
      command: update-ca-trust extract
      when:
        - ansible_os_family == 'RedHat'
    when:
      - ansible_user_id == 'root'
